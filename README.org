* Site pessoal para estudo
** Objetivo : construir pequeno site para hospedagem de artigos e acesso mediante senha de usuário, que permita gerar um modelo de site com dados em mysql, usando flask como framework, flaskform para formularios e flask login para gerenciar sessão. Tentar usar bootstrap para geração da interface (css). Implementar testes com pytest
** Descricao da proposta
*** Permitir 3 níveis de usuário
**** SuperAdmin
**** Admin
**** Usuário
*** Cadastro de usuários com senha (usada na autenticacao)
**** By Usuário
**** By SuperAdmin
*** Administração de usuários pelo SuperAdmin
**** Inclusão
**** Remoção
**** Edição
**** Visualização
**** Troca de senha
*** Publicacao de artigos por usuários autenticados
**** Artigos com Titulo, Conteudo, Autor (id-user-logado)
**** Permitir que os artigos sejam classificados com 'n' etiquetas de assunto (#)
**** Acesso dos artigos por etiquetas, por usuario (autor)
*** Arquitetura
**** WEB - flask framework
**** Database - MySQL
*** Rotas propostas
**** / - home.html
***** método
****** GET/POST 
verificar se current_user.is_authenticated é true (importado current_user de flask_login)
******* existe
mensagem "username"
******* não existe
mensagem "usernaologado"
****** passa mensagem para renderizar "index.html"
**** /users - users.html (lista de usuários) - somente superadmins
**** /articles - articles.html (lista de artigos) - usuários filtrado pelos artigos com permissoes
**** /tags - tags.html (lista de etiquetas) - somente superadmins
**** /roles - roles.html (lista de permissoes de usuário) - somente superadmins
**** /login - login.html (login do usuário)
***** método
****** GET 
- carrega form como instância da classe LoginForm
- apresenta login.html
****** POST
- captura USERNAME e PASSWORD de REQUEST
- carrega instancia de LoginForm e SignupForm
- verifica se username existe em db.articles.user (by username)
******* user exists
******** senha ok
********* processa login
********** método login_user para o objeto user
********* redirect para '/login' 
******** senha not ok
********* redirect para '/profile'
******* user not exists
******** redirect para '/signup' 
**** /logout
***** método
****** GET / POST
- logout_user
- redirect para '/login'
**** /signup - signup.html (página de cadastro)
***** método
****** GET
- carrega form como instância da classe SignupForm
- apresenta signup.html
****** POST
- carrega form de request.form
- verifica se username ou email existe em db.articles.user 
******* user exists
******** redirec para '/login'
******* user not exists
******** cadastra novo usuário no banco de dados
******** redireciona para '/login'
**** /profile - profile.html (página de edição) 
***** método
****** GET / POST
- carrega USERID de REQUEST
- recupera USER (load_user by USERID)
- apresenta profile.html
**** /change_password - change_password.html
****** GET
- carrega form como instância da classe ChangePasswordForm
- apresenta change_password.html
****** POST
- carrega form como instancia da classe ChangePasswordForm
- captura USERNAME, PASSWORD, PASSWORD1 e PASSWORD2 de REQUEST
******* username não existe
******** mensagem 'usuario nao encontrado'
******** redirect para 'change_password'
******* password não bate
******** mensagem 'senha atual incorreta'
******** redirect para 'change_password'
******* password1 not equal password2
******** mensagem 'senha nao bate'
******** redirect para 'change_password'
******* nenhuma das acima
******** troca a senha do usuário
********* remove user (senha velha)
********* add user (senha nova)
******** mensagem 'senha trocada com sucesso'
******** redirect para 'change_password'
*** Diretório do projeto proposto
#+begin_src diretorios
./site-articles
├── README.md         ..... Instrucoes
├── env_dev.sh        ..... Variaveis de ambiente para DEV
├── Makefile          ..... Makefile ????
├── requirements.txt  ..... Pacotes python - dependencias
├── articles          ..... Diretório da aplicacao
│   ├── __init__.py   ..... __init__.py ?????
│   └── app.py        ..... Arquivo inicial da aplicacao
├── docker            ..... Diretório para container da aplicacao
│   └── entrypoint.sh ..... Script inicial do container que roda a aplicacao
├── doc               ..... Diretório para documentacao do desenvolvimento
└── tests             ..... Diretório para os testes da aplicacao
  #+end_src
** Inicializando estrutura para desenvolvimento
*** Desenvolvimento local
**** python 3.8 com virtualenv
***** Criar virtualenv
#+begin_src shell
virtualenv venv
#+end_src
***** Carregar virtualenv
****** método 1
#+begin_src shell
. ./venv/bin/activate     # opcao 1
#+end_src
****** método 2
#+begin_src shell
source venv/bin/activate  # opcao 2
#+end_src
***** Desativar virtualenv
#+begin_src shell
deactivate
#+end_src

**** carregar variavel de ambiente (env_dev.sh)
***** Desenvolvimento
. ./env_dev.sh
***** Producao
**** desativar variaveis de ambiente
***** Desenvolvimento
#+begin_src sh
unset FLASK_APP
unset FLASK_DEBUG
unset FLASK_ENV
#+end_src
**** Rodar a aplicação em modo DEV
***** Atualizar PIP do virtualenv
pip3 install --upgrade pip
***** Instalar a aplicacao/dependencias (baseado no setuptools)
pip3 install -e .
***** Rodar a aplicação
flask run -h 0.0.0.0

** Pendencias
*** DONE Adicionar acesso restrito para rotas logadas
CLOSED: [2022-06-29 qua 12:29]
- import login_required de flask_login
- decorator @login_required
  - foi necessário apontar login_manager.login_view = '/'
*** DONE Colocar flask-admin para administrar modelo de usuarios 
CLOSED: [2022-07-03 dom 21:51]
*** DONE Incorporar bootstrap-flask
CLOSED: [2022-07-03 dom 22:02]
**** Bootstrap - framework css 
**** Gerar extensão de Template
***** base.html
***** {% block content %}
**** modulo padrao (flask-bootstrap) - compativel com bootstrap 2 e 3 (antigos)
**** modulo escolhido (bootstrap-flask) aceita bootstrap 4 e 5 (mais modernos)
***** Exemplo : https://bootstrap-flask.readthedocs.io/en/stable/examples/
instalado : ~/lixo/bootstrap/bootstrap-flask/
. ./venv/bin/activate
python bootstrap5/app.py
**** Import dos css dentro do template
{% from 'bootstrap5/nav.html' import render_nav_item %}
{% from 'bootstrap5/utils.html' import render_messages %}
**** Configuração de Thema
app.config['BOOTSTRAP_BOOTSWATCH_THEME'] = 'lux'
*** DONE Adicionar saídas de LOG através de logging
CLOSED: [2022-07-10 dom 18:59]
*** TODO Criar regras de negócio para artigos
**** DONE Definir estrutura de Banco de Dados
CLOSED: [2022-08-15 seg 11:17]
***** Tabelas de dados
| Data tables |
| article     |
| tag         |
| user        |
***** Tabelas de correlação
| Correlation tables      | Desc                                   |
| article-tag-association | Relaciona Tags com os Artigos          |
| user-article-permission | Define permissao ao acesso dos artigos |
**** DONE Mapa de URLs preliminar
CLOSED: [2022-08-17 qua 19:40]
***** Para facilitar a implementacao da pesquisa, usar flask admin para gerar as telas de input de dados e separar a lógica de consulta para entrega no primeiro momemento
****** aplicacao
******* mapinha
******** <url>/login
******** <url>/logout
******** <url>/search
******** <url>/article/<id>
****** admin
- user
- artigos
- tags
******* Adicionar os modelos de dados para as tabelas complementares (tags, artigos)
# Adicionar classes de dados ao Flask Admin
admin.add_view(ModelView(User, db.session))
admin.add_view(ModelView(Article, db.session))
admin.add_view(ModelView(Tag, db.session))
******* mapinha
******** <url>/admin/user
******** <url>/admin/article
******** <url>/admin/tag
**** DONE Separar aplicacao por modulos
CLOSED: [2022-08-17 qua 19:40]
***** Definido modo factory para registro de extensoes externas
***** Extensoes FLASK externas registradas usadas até o momento:
#+begin_src lista de extensoes
from flask_bootstrap import Bootstrap5
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_admin import Admin
#+end_src
***** Definicao de Modelos (banco de dados) e Formularios
#+begin_src modelos/forms
from articles.models import User
from articles.forms import LoginForm, SignupForm, ChangePasswordForm
#+end_src

***** Extensoes diversas
#+begin_src
from werkzeug.security import generate_password_hash, check_password_hash
import logging
#+end_src
**** DONE Separa aplicacao com blueprints
CLOSED: [2022-08-17 qua 19:40]
***** Definicao de Blueprints
#+begin_src python
bp = Blueprint("webui", __name__)

bp.add_url_rule("/",
                view_func=index,
                methods=['GET'])
bp.add_url_rule("/login",
                view_func=login,
                methods=['GET', 'POST'])
bp.add_url_rule("/logout",
                view_func=logout,
                methods=['GET'])
bp.add_url_rule("/signup",
                view_func=signup,
                methods=['GET', 'POST'])
bp.add_url_rule("/profile",
                view_func=profile,
                methods=['GET'])
bp.add_url_rule("/change_password",
                view_func=change_password,
                methods=['GET', 'POST'])
#+end_src
**** TODO Mapa de URLs final
**** TODO Definir URLs que acessam logada e URLs que acessam sem Login
**** TODO Lógica para status de LOGIN nas páginas
