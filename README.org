* Site pessoal para estudo
** Objetivo : construir pequeno site para hospedagem de artigos e acesso mediante senha de usuário, que permita gerar um modelo de site com dados em mysql, usando flask como framework, flaskform para formularios e flask login para gerenciar sessão. Tentar usar bootstrap para geração da interface (css). Implementar testes com pytest
** Descricao da proposta
*** Cadastro de usuários com senha (usada na autenticacao)
*** Permitir 3 níveis de usuário
**** SuperAdmin
**** Admin
**** Usuário
*** Publicacao de artigos por usuários autenticados
**** Artigos com Titulo, Conteudo, Autor (id-user-logado)
**** Permitir que os artigos sejam classificados com 'n' etiquetas de assunto (#)
**** Acesso dos artigos por etiquetas, por usuario (autor)
*** Arquitetura
**** WEB - flask framework
**** Database - MySQL
*** Rotas propostas
**** / - home.html
**** /users - users.html (lista de usuários)
**** /articles - articles.html (lista de artigos)
**** /tags - tags.html (lista de etiquetas)
**** /roles - roles.html (lista de permissoes de usuário)
**** /login - login.html (login do usuário)
***** método
****** GET 
- carrega form como instância da classe LoginForm
- apresenta login.html
****** POST
- carrega form de request.form
- verifica se username existe em db.articles.user (by username)
******* user exists
******** processa login
******* user not exists
******** redirect para '/signup' 
**** /signup - signup.html (página de cadastro)
***** método
****** GET
- carrega form como instância da classe SignupForm
- apresenta signup.html
****** POST
- carrega form de request.form
- verifica se username ou email existe em db.articles.user 
******* user exists
******** redirec para '/login'
******* user not exists
******** cadastra novo usuário no banco de dados
******** redireciona para '/login'

**** /profile - profile.html (página de edição) 
***** método
****** GET
- pesquisa usuário logado e carrega dados para formulário
- apresenta profile.html
****** POST
- carrega form de request.form
- pesquisa usuário logado
- pesquisa se há diferença dados REQUEST com dados da BASE
******* Há diferença
******** grava os dados
******** mensagem de dados gravados com sucesso
******** apresenta profile.html
******* Não há diferença
******** apresenta profile.html




**** /logout
*** Diretório do projeto proposto
#+begin_src diretorios
./site-articles
├── README.md         ..... Instrucoes
├── env_dev.sh        ..... Variaveis de ambiente para DEV
├── Makefile          ..... Makefile ????
├── requirements.txt  ..... Pacotes python - dependencias
├── articles          ..... Diretório da aplicacao
│   ├── __init__.py   ..... __init__.py ?????
│   └── app.py        ..... Arquivo inicial da aplicacao
├── docker            ..... Diretório para container da aplicacao
│   └── entrypoint.sh ..... Script inicial do container que roda a aplicacao
├── doc               ..... Diretório para documentacao do desenvolvimento
└── tests             ..... Diretório para os testes da aplicacao
  #+end_src
** Inicializando estrutura para desenvolvimento
*** Desenvolvimento local
**** python 3.8 com virtualenv
***** Criar virtualenv
#+begin_src shell
virtualenv venv
#+end_src
***** Carregar virtualenv
****** método 1
#+begin_src shell
. ./venv/bin/activate     # opcao 1
#+end_src
****** método 2
#+begin_src shell
source venv/bin/activate  # opcao 2
#+end_src
***** Desativar virtualenv
#+begin_src shell
deactivate
#+end_src

**** carregar variavel de ambiente (env_dev.sh)
***** Desenvolvimento
. ./env_dev.sh
***** Producao

**** Rodar a aplicação em modo DEV
***** Atualizar PIP do virtualenv
pip3 install --upgrade pip
***** Instalar a aplicacao/dependencias (baseado no setuptools)
pip3 install -e .
***** Rodar a aplicação
flask run -h 0.0.0.0


